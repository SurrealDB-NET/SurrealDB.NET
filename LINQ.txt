SELECT age, name, email FROM user;
SurrealQL
    .Select<User>(user => new
    {
        user.Age,
        user.Name,
        user.Email
    })
    .ToListAsync();

SELECT age >= 18 AS adult FROM user;
SurrealQL
    .Select<User>(user => new
    {
        Adult = user.Age >= 18
    })
    .ToListAsync();

SELECT *, tags.*.value AS tags FROM article;
SurrealQL
    .Select<Article>(article => new
    {
        article,
        Tags = article.Tags.Select(tag => tag.Value)
    })
    .ToListAsync();

SELECT addresses[WHERE active = true] FROM customer;
SurrealQL
    .Select<Customer>(customer => new
    {
        Addresses = customer.Addresses.Where(address => address.Active)
    })
    .ToListAsync();

SELECT ->like->friend.name AS friends FROM person:tobie;
SurrealQL
    .Select<Person>(person => new
    {
        Friends = person.Like.Friend.Name // Problem: Only returns 1 name
    }, "tobie")
    .FirstOrDefaultAsync();

SELECT ( ( celsius * 2 ) + 30 ) AS fahrenheit FROM temperatue;
SurrealQL
    .Select<Temperature>(temperature => new
    {
        Fahrenheit = (temperature.Celsius * 2) + 30
    })
    .ToListAsync();

SELECT { weekly: false, monthly: true } AS `marketing settings` FROM user;
SurrealQL
    .Select<User>(user => new
    {
        MarketingSettings = new
        {
            Weekly = false,
            Monthly = true
        }
    })
    .ToListAsync();

SELECT *, (SELECT * FROM events WHERE type = 'activity' LIMIT 5) AS history FROM user;
SurrealQL
    .Select<User>(user => new
    {
        user,
        History = SurrealQL
            .Select<Event>(@event => new { @event })
            .Where(@event => @event.Type == "activity")
            .Limit(5)
            .ToListAsync()
    })
    .ToListAsync();

SELECT *, (SELECT * FROM events WHERE host == $parent.id) AS self_hosted FROM user;
var parentId = parent.Id;
SurrealQL
    .Select<User>(user => new
    {
        user,
        SelfHosted = SurrealQL
            .Select<Event>(@event => new { @event })
            .Where(@event => @event.Host == parentId)
            .ToListAsync()
    })
    .ToListAsync();

// MULTI SELECT STATEMENTS
// Proposal - We make it so they return ArrayLists
// SELECT * FROM user, admin;
// SurrealQL
//     .Select<User>(user => new { user })
//     .Select<Admin>(admin => new { admin })
//     .ToListAsync();
//
// SELECT * FROM $parameter WHERE admin = true;
// var parameter = ...
// SurrealQL
//     .Select(parameter, account => new { account })
//     .Where(account => account.Admin)
//     .ToListAsync();
//
// SELECT * FROM user:tobie, user:jaime, company:surrealdb;
// SurrealQL
//     .Select<User>(user => new { user }, "tobie")
//     .Select<User>(user => new { user }, "jaime")
//     .Select<Company>("surrealdb", company => new { company })
//     .ToListAsync();

SELECT * FROM [3648937, "test", person:lrym5gur8hzws72ux5fa, person:4luro9170uwcv1xrfvby];
var arr = new ArrayList() { 3648937, "test", "lrym5gur8hzws72ux5fa", "4luro9170uwcv1xrfvby" }; // LOL

SELECT * FROM { person: person:lrym5gur8hzws72ux5fa, embedded: true };
var obj = new
{
    Person = new Person
    {
        Id = "lrym5gur8hzws72ux5fa"
    }
    Embedded = true
}; // LOL

SELECT * FROM (SELECT age >= 18 AS adult FROM user) WHERE adult = true;
SurrealQL
    .Select<User>(user => new
    {
        Adult = user.Age >= 18
    })
    .ToListAsync()
    .Where(x => x.Adult);

SELECT * FROM article WHERE published = true;
SurrealQL
    .Select<Article>(article => new { article })
    .Where(article => article.Published)
    .ToListAsync();

SELECT * FROM profile WHERE count(->experience->organisation) > 3;
SurrealQL
    .Select<Profile>(profile => new { profile })
    .Where(profile => CountFunctions.Count(profile.Experience.Organisation) > 3)
    .ToListAsync();

SELECT * FROM user WHERE (admin AND active) OR owner = true;
SurrealQL
    .Select<User>(user => new { user })
    .Where(user => (user.Admin && user.Active) || user.Owner)
    .ToListAsync();

SELECT * FROM user SPLIT emails;
SurrealQL
    .Select<User>(user => new { user })
    .Split(user => user.Emails)
    .ToListAsync();

SELECT * FROM country SPLIT locations.cities;
    .Select<Country>(country => new { country })
    .Split(country => country.Locations.Select(location => location.Cities))
    .ToListAsync();

SELECT country FROM user GROUP BY country;
SurrealQL
    .Select<User>(user => new { user.Country })
    .GroupBy(user => user.Country)
    .ToListAsync();

SELECT settings.published FROM article GROUP BY settings.published;
SurrealQL
    .Select<Article>(article => new { IsPublished = article.Settings.Select(settings => settings.Published) })
    .GroupBy(article => article.Settings.Select(settings => settings.Published))
    .ToListAsync();

SELECT gender, country, city FROM person GROUP BY gender, country, city;
SurrealQL
    .Select<Person>(person = new
    {
        person.Gender,
        person.Country,
        person.City
    })
    .GroupBy(person => person.Gender)
    .GroupBy(person => person.Country)
    .GroupBy(person => person.City)
    .ToListAsync();

SELECT count() AS total, math::sum(age), gender, country FROM person GROUP BY gender, country;
SurrealQL
    .Select<Person>(person =>
    {
        Total = CountFunctions.Count(),
        AgeSum = MathFunctions.Sum(person.Age),
        person.Gender,
        person.Country
    })
    .GroupBy(person => person.Gender)
    .GroupBy(person => person.Country)
    .ToListAsync();

SELECT * FROM user ORDER BY RAND();
SurrealQL
    .Select<User>(user => new { user })
    .OrderByRandom()
    .ToListAsync();

SELECT * FROM song ORDER BY rating DESC;
SurrealQL
    .Select<Song>(song => new { song })
    .OrderBy(song => song.Rating, SortOrder.DESC)
    .ToListAsync();

SELECT * FROM song ORDER By artist ASC, rating DESC;
SurrealQL
    .Select<Song>(song => new { song })
    .OrderBy(song => song.Artist, SortOrder.ASC)
    .OrderBy(song => song.Rating, SortOrder.DESC)
    .ToListAsync();

SELECT * FROM article ORDER BY title COLLATE ASC;
SurrealQL
    .Select<Article>(article => new { article })
    .OrderBy(article => article.Title, textSortMethod: TextSortMethod.Collate)
    .ToListAsync();

SELECT * FROM article ORDER BY title NUMERIC ASC;
SurrealQL
    .Select<Article>(article => new { article })
    .OrderBy(article => article.Title, textSortMethod: TextSortMethod.Numeric)
    .ToListAsync();

SELECT * FROM user LIMIT 50;
SurrealQL
    .Select<User>(user => new { user })
    .Limit(50)
    .ToListAsync();

SELECT * FROM user LIMIT 50 START 50;
SurrealQL
    .Select<User>(user => new { user })
    .Limit(50)
    .Start(50)
    .ToListAsync();

SELECT * FROM user:tobie FETCH account, account.users;
SurrealQL
    .Select<User>(user => new { user }, "tobie")
    .Fetch(user => user.Account)
    .Fetch(user => user.Account.Users)
    .FirstOrDefaultAsync();

SELECT * FROM person WHERE ->knows->person->(knows WHERE influencer = true) TIMEOUT 5s;
SurrealQL
    .Select<Person>(person => new { person })
    .Where(person => person.Knows.Select(knows => knows.Person).Where(knows => knows.Influencer))
    .Timeout("5s") // or new Duration(seconds: 5)
    .ToListAsync();

SELECT ->purchased->product<-purchased<-person->purchased->product FROM person:tobie PARALLEL;
SurrealQL
    .Select<Person>(person => new
    {
        AlsoBought = person.Purchased.Product.Purchased.Person.Purchased.Product
    }, "tobie")
    .Parallel()
    .FirstOrDefaultAsync();

UPDATE person SET skills += ['breathing'];
SurrealQL
    .Update<Person>(person => new
    {
        Skills = person.Skills.Append("breathing")
    })
    .SaveChangesAsync();

UPDATE person:100 SET name = 'Tobie', company = 'SurrealDB', skills = ['Rust', 'Go', 'JavaScript'];
var person100 = SurrealQL
    .Select<Person>(person => new { person }, "100")
    .FirstOrDefaultAsync();
person100.Name = "Tobie";
person100.Company = "SurrealDB";
person100.Skills = new[] { "Rust", "Go", "JavaScript" };
SurrealQL
    .Update<Person>(person100)
    .SaveChangesAsync();

UPDATE person:tobie SET name = 'Tobie', company = 'SurrealDB', skills = ['Rust', 'Go', 'JavaScript'];
var tobie = SurrealQL
    .Select<Person>(person => new { person }, "tobie")
    .FirstOrDefaultAsync();
tobie.Name = "Tobie";
tobie.Company = "SurrealDB";
tobie.Skills = new[] { "Rust", "Go", "JavaScript" };
SurrealQL
    .Update<Person>(tobie)
    .SaveChangesAsync();

UPDATE webpage:home SET click_count += 1;
var home = SurrealQL
    .Select<Webpage>(webpage => new { webpage }, "home")
    .FirstOrDefaultAsync();
home.ClickCount++;
SurrealQL
    .Update<Person>(home)
    .SaveChangesAsync();

UPDATE person:tobie SET interests -= 'Java';
var tobie = SurrealQL
    .Select<Person>(person => new { person }, "tobie")
    .FirstOrDefaultAsync();
tobie.Intrests.Remove("Java");
SurrealQL
    .Update<Person>(tobie)
    .SaveChangesAsync();

UPDATE city SET population = 9541000 WHERE name = 'London';
SurrealQL
    .Update<City>(city => new
    {
        Population = 9541000
    })
    .Where(city => city.Name == "London")
    .SaveChangesAsync();

UPDATE person SET important = true WHERE ->knows->person->(knows WHERE influencer = true) TIMEOUT 5s;
SurrealQL
    .Update<Person>(person => new
    {
        Important = true
    })
    .Where(person => person.Knows.Select(knows => knows.Person).Where(knows => knows.Influencer))
    .Timeout("5s") // or new Duration(seconds: 5)
    .SaveChangesAsync();


